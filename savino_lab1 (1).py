# -*- coding: utf-8 -*-
"""savino_lab1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N4UvZQXDYR9l-j9v8emOgU6uELn4jqfr
"""

"""
CMPS 6100  Lab 1
Author: Nicholas Savino
"""

### the only imports needed are here
import math
import time
###

def is_divisible_by(num, i):
  # TO-DO
  # Implement this function
  if num % i == 0:
    divisible = True
  else:
    divisible = False
  return divisible

def is_prime(num):
  # TO-DO
  # Implement this function
  prime = True # assume the number is prime
  if num <= 1: # 0 and negative numbers are neither prime nor composite
    print('Choose a positive value. Numbers less than or equal to zero are neither prime nor composite')
    prime = False
  elif num % 1 != 0: #prevent the selection of non integer values
    print('Choose an integer. Non integers are neither prime nor composite.')
    prime = False
  elif num == 4: #special case
    prime = False
  else:
    for i in range (2,(num//2)):
      if is_divisible_by(num,i) == True: #must have the is_diviseble func pre defined
        prime = False #checks to see if num had divisors
        break
      else:
        prime = True
  return prime

def generate_primes(upper_bound):
  # TO-DO
  # Implement this function
  prime_list = []
  i = 2
  while i < upper_bound:
    if is_prime(i) == True: #must have the is_prime func pre defined
      prime_list.append(i)
      i += 1
    else:
      i += 1
  return(prime_list)


def count_primes(upper_bound):
  # TO-DO
  # Implement this function
  prime_list = generate_primes(upper_bound) #count the length of the list of primes, need to have the generate_primes func defined in advance
  return(len(prime_list))

x = 500000
def generate_twin_primes(upper_bound):
  # TO-DO
  # Implement this function
  twin_primes_list = [] #empty list
  prime_list = generate_primes(upper_bound) #generate list of primes, need to have generate_primes func pre defined
  j = 0
  while j < len(prime_list)-1: #iterate through list of primes
    if prime_list[j] == prime_list[j+1] - 2: #check to see if primes are seperated by 2
      twin_primes_set_list = [] #empty list
      twin_primes_set_list.append(prime_list[j]) #create list of two twin primes
      twin_primes_set_list.append(prime_list[j+1]) #create list of two twin primes
      twin_primes_list.append(twin_primes_set_list) #create list of list if twin prime pairs
      j += 1
    else:
      j += 1
  return(twin_primes_list)

def count_twin_primes(upper_bound):
  # TO-DO
  # Implement this function
  twin_primes_list = generate_twin_primes(upper_bound) #count the length of the list of twin primes, need to have the generate_twin_primes func defined in advance
  return(len(twin_primes_list))

'''
start = time.time()
generate_twin_primes(x)
end = time.time()
elapsed_time_ms = (end - start)*1000
print('Elapsed Time: {:.2f} milliseconds'.format(elapsed_time_ms))
'''

'''
#########    #########
### Test Functions ###
#########    #########

# You can run them on the terminal.
# The command:
#
# pytest main.py::test_is_divisible_by
#
# Will run the test_is_divisible_by test function.

def test_is_divisible_by():
    assert is_divisible_by(2, 2) == True
    assert is_divisible_by(3, 2) == False
    assert is_divisible_by(47, 7) == False

def test_is_prime():
    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 241, 461, 701, 881, 883, 997]
    for prime in primes:
        assert is_prime(prime) == True
    composites = [4, 6, 8, 9, 10, 25, 30, 36, 39, 49, 60, 64, 121]
    for composite in composites:
        assert is_prime(composite) == False

def test_count_primes():
    assert count_primes(10) == 4
    assert count_primes(100) == 25
    assert count_primes(1000) == 168
    assert count_primes(10000) == 1229

def test_count_twin_primes():
    assert count_twin_primes(10) == 2
    # The two pairs less than 10 are (3,5) and (5,7)
    assert count_twin_primes(100) == 8
    assert count_twin_primes(1000) == 35
    assert count_twin_primes(10000) == 205'''

